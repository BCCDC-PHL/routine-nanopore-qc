manifest {
  author = 'Dan Fornika'
  name = 'BCCDC-PHL/routine-nanopore-qc'
  version = '0.1.0'
  description = 'Routine sequence QC of nanopore data'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
}

params {
  long_read_suffixes = ['*_RL', '*_L']
  fastq_exts = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']
  fastq_search_path = makeFastqSearchPath(long_read_suffixes, fastq_exts)
  fastq_input = 'NO_FILE'
  samplesheet_input = 'NO_FILE'
  pipeline_short_name = parsePipelineName(manifest.toMap().get('name'))
  pipeline_minor_version = parseMinorVersion(manifest.toMap().get('version'))
}


def makeFastqSearchPath(long_read_suffixes, fastq_exts) {
    def fastq_search_path = []
    if (params.fastq_input.toString() != 'NO_FILE') {
        for (suffix in long_read_suffixes) {
            for (ext in fastq_exts) {
                fastq_search_path.add(params.fastq_input.toString() + '/' + suffix.toString() + ext.toString())
	    }
        }
    }
    return fastq_search_path
}

def parseMinorVersion(version) {
    minor_version = version.split('\\.')[0..1].join('.')
    return minor_version
}

def parsePipelineName(name) {
    short_name = name.split('/')[1]
    return short_name
}

profiles {
  conda {
    process.conda = "$baseDir/environments/environment.yml"
    if (params.cache){
     conda.cacheDir = params.cache
    }
  }
}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

process {
  withName: kraken2 {
    cpus = 8
    memory = '64G'
  }
}

